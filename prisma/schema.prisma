// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  name              String?            @db.VarChar(128)
  userType          USER_TYPE          @map("user_type")
  username          String             @unique @db.VarChar(64)
  password          String
  createdAt         DateTime           @default(now()) @map("created_at")
  products          Product[]
  productMedias     ProductMedia[]
  seStockingRecords ReStockingRecord[]
  cartItems         CartItem[]
  orders            Order[]

  @@index([username, name])
  @@map("user")
}

// To represent the realworld situation we can implement product with variants
model Product {
  id                Int                @id @default(autoincrement())
  title             String             @unique
  description       String
  visualDiscount    Decimal            @default(0) @map("visual_discount") @db.Decimal(10, 2)
  price             Decimal            @db.Decimal(10, 2)
  stockCount        Int                @default(0) @map("stock_count")
  createdAt         DateTime           @default(now()) @map("created_at")
  createdById       Int                @map("created_by_id")
  productMedias     ProductMedia[]
  reStockingRecords ReStockingRecord[]
  createdBy         User               @relation(fields: [createdById], references: [id])
  OrderItem         OrderItem[]
  CartItem          CartItem[]

  @@index([title])
  @@map("product")
}

model ProductMedia {
  id          Int                @id @default(autoincrement())
  mediaType   PRODUCT_MEDIA_TYPE @default(IMAGE) @map("media_type")
  src         String
  active      Boolean            @default(true)
  product     Product            @relation(fields: [productId], references: [id])
  productId   Int                @map("product_id")
  createdAt   DateTime           @default(now()) @map("created_at")
  createdById Int                @map("created_by_id")
  createdBy   User               @relation(fields: [createdById], references: [id])

  @@map("product_media")
}

model ReStockingRecord {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int      @map("product_id")
  atCount     Int      @map("at_count")
  count       Int
  createdAt   DateTime @default(now()) @map("created_at")
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int      @map("created_by_id")

  @@map("re_stocking_record")
}

model Order {
  id         Int          @id @default(autoincrement())
  status     ORDER_STATUS @default(PENDING)
  user       User         @relation(fields: [userId], references: [id])
  userId     Int          @map("user_id")
  orderItems OrderItem[]
  createdAt  DateTime     @default(now()) @map("created_at")

  @@map("order")
}

model OrderItem {
  quantity  Int     @default(1)
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int     @map("product_id")
  orderId   Int     @map("order_id")

  @@id([orderId, productId])
  @@map("order_item")
}

model CartItem {
  quantity  Int      @default(1)
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @map("product_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([productId, userId])
  @@map("cart_item")
}

enum USER_TYPE {
  ADMIN
  CUSTOMER
}

enum PRODUCT_MEDIA_TYPE {
  IMAGE
  VIDEO
}

enum ORDER_STATUS {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELED
  RETURNED
  REFUNDED
  FAILED
}
